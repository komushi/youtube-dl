service: serverless-youtube-dl

package:
  exclude:
    - node_modules/**
    - vendored/**
    - __pycache__/**
    - .gitignore
    - requirements.txt
  include:
    - vendored/youtube_dl*/**

plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: python3.6
  memorySize: 256
  timeout: 60
  stage: dev
  region: ap-northeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: "Allow"
      Action:
        - batch:*
        - cloudwatch:GetMetricStatistics
        - ec2:DescribeSubnets
        - ec2:DescribeSecurityGroups
        - ec2:DescribeKeyPairs
        - ecs:DescribeClusters
        - ecs:Describe*
        - ecs:List*
        - logs:Describe*
        - logs:Get*
        - logs:TestMetricFilter
        - logs:FilterLogEvents
        - iam:ListInstanceProfiles
        - iam:ListRoles
      Resource: "*"
    - Effect: Allow
      Action:
        - iam:PassRole
      Resource:
        - "arn:aws:iam::*:role/AWSBatchServiceRole"
        - "arn:aws:iam::*:role/ecsInstanceRole"
        - "arn:aws:iam::*:role/iaws-ec2-spot-fleet-role"
        - "arn:aws:iam::*:role/aws-ec2-spot-fleet-role"
        - "arn:aws:iam::*:role/AWSBatchJobRole*"

  environment:
    DYNAMODB_TABLE: youtube_jobs

functions:
  extract-url:
    handler: handler.extract
  submit-batch-jobs:
    environment:
      JOB_DEFINITION: youtube-dl-dl-convert-ul:2
      JOB_QUEUE: first-run-job-queue
    handler: handler.submit

stepFunctions:
  stateMachines:
    extractUrlFunction:
      events:
        - http:
            path: youtube-dl
            method: post
      definition:
        Comment: "An example to use AWS Step Functions and AWS Batch to parallely download/convert/upload videos from youtube playlist."
        StartAt: ExtractUrl
        States:
          ExtractUrl:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-extract-url"
            End: true

resources:
  Resources:
    JobsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: job_id
            AttributeType: S
          - AttributeName: video_id
            AttributeType: S
        KeySchema:
          - AttributeName: job_id
            KeyType: HASH
          - AttributeName: video_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
